{"version":3,"sources":["ConfigCustomEasyAccess.jsx","Components.jsx"],"names":[],"mappings":"4SAoBA,KAAM,GAAS,GAAU,EACrB,MAAO,CACH,SAAU,GACd,EACA,OAAQ,CACJ,SAAU,GACV,WAAY,MAChB,CACJ,GAEA,MAAM,SAA+B,gBAAc,CAC/C,mBAAoB,CAChB,MAAM,kBAAkB,EAExB,KAAK,MAAM,OAAO,oBAAoB,EACjC,KAAK,GAAa,CACf,EAAY,EACP,OAAO,GAAS,CArCrC,MAsCwB,2BAAU,SAAV,cAAkB,UAAY,GAAS,OAAO,QAAQ,SAAW,QAAU,EAAS,OAAO,QAAQ,KAAI,EAC1G,IAAI,GAAa,EACd,GAAI,EAAS,IAAI,QAAQ,qBAAsB,EAAE,EACjD,OAAQ,EAAS,OAAO,QAAQ,SAAW,OAC3C,SAAU,EAAS,OAAO,QAC9B,EAAE,EACD,KAAK,CAAC,EAAG,IAAM,EAAE,GAAK,EAAE,GAAK,EAAK,EAAE,GAAK,EAAE,GAAK,GAAK,CAAE,EAE5D,KAAK,SAAS,CAAC,WAAS,CAAC,CAC7B,CAAC,CACT,CAEA,WAAW,EAAO,EAAU,EAAc,CACtC,GAAK,KAAK,MAAM,UAET,CACH,KAAM,GAAuB,yBAAuB,KAAK,MAAM,KAAM,sBAAsB,GAAK,CAAC,EAC3F,EAAuB,yBAAuB,KAAK,MAAM,KAAM,mBAAmB,GAAQ,CAAC,EAEjG,MAAO,mBAAC,iBAAc,KAClB,kBAAC,QAAK,CAAC,UAAW,KAAK,MAAM,QAAQ,MAAO,KAAK,SAC7C,kBAAC,YAAS,KACN,kBAAC,WAAQ,KACL,kBAAC,YAAS,CAAC,UAAW,KAAK,MAAM,QAAQ,QAAS,SAAO,sBAAsB,CAAE,EACjF,kBAAC,YAAS,CAAC,UAAW,KAAK,MAAM,QAAQ,QAAS,SAAO,oBAAoB,CAAE,EAC/E,kBAAC,YAAS,CAAC,UAAW,KAAK,MAAM,QAAQ,QAAS,SAAO,iBAAiB,CAAE,CAChF,CACJ,EACA,kBAAC,YAAS,KACL,KAAK,MAAM,UAAU,IAAK,GACvB,kBAAC,WAAQ,CAAC,IAAK,EAAI,IACf,kBAAC,YAAS,CAAC,UAAU,KAAK,MAAM,OAAO,EAAI,EAAG,EAC9C,kBAAC,YAAS,KACL,EAAI,OACD,kBAAC,WAAQ,CAAC,QAAS,EAAqB,SAAS,EAAI,EAAE,EACnD,QAAS,IAAM,CACX,KAAM,GAAwB,CAAC,GAAG,CAAoB,EAChD,EAAM,EAAsB,QAAQ,EAAI,EAAE,EAC5C,IAAQ,GACR,EAAsB,OAAO,EAAK,CAAC,EAEnC,GAAsB,KAAK,EAAI,EAAE,EACjC,EAAsB,KAAK,GAE/B,KAAK,SAAS,uBAAwB,CAAqB,CAC/D,EACJ,EACF,IAAK,EACX,kBAAC,YAAS,KACL,EAAI,SACD,kBAAC,WAAQ,CACL,QAAS,EAAkB,SAAS,EAAI,EAAE,EACzC,QAAS,IAAM,CACX,KAAM,GAAqB,CAAC,GAAG,CAAiB,EAC1C,EAAM,EAAmB,QAAQ,EAAI,EAAE,EACzC,IAAQ,GACR,EAAmB,OAAO,EAAK,CAAC,EAEhC,GAAmB,KAAK,EAAI,EAAE,EAC9B,EAAmB,KAAK,GAE5B,KAAK,SAAS,oBAAqB,CAAkB,CACzD,EACL,EAAK,IACb,CACJ,CACH,CACL,CACJ,CACJ,CACJ,KAxDI,OAAO,KAyDf,CACJ,CAEA,EAAuB,UAAY,CAC/B,OAAQ,sBACR,UAAW,WACX,UAAW,WACX,MAAO,WACP,UAAW,WACX,KAAM,sBACN,OAAQ,WACR,QAAS,SACT,SAAU,QACd,EAEA,MAAe,iBAAW,CAAM,EAAE,CAAsB,EC1HxD,EAAe,CAAE,uBAAsB,CAAC,C","file":"static/js/src_Components_jsx.cad8bc46.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@mui/styles';\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Checkbox,\n}  from '@mui/material';\n\n// important to make from package and not from some children.\n// invalid\n// import ConfigGeneric from '@iobroker/adapter-react-v5/ConfigGeneric';\n// valid\nimport { i18n, ConfigGeneric } from '@iobroker/adapter-react-v5';\n\nconst styles = theme => ({\n    table: {\n        minWidth: 400\n    },\n    header: {\n        fontSize: 16,\n        fontWeight: 'bold'\n    }\n});\n\nclass ConfigCustomEasyAccess extends ConfigGeneric {\n    componentDidMount() {\n        super.componentDidMount();\n\n        this.props.socket.getAdapterInstances()\n            .then(instances => {\n                instances = instances\n                    .filter(instance =>\n                        instance?.common?.adminUI && (instance.common.adminUI.config !== 'none' || instance.common.adminUI.tab))\n                    .map(instance => ({\n                        id: instance._id.replace(/^system\\.adapter\\./, ''),\n                        config: instance.common.adminUI.config !== 'none',\n                        adminTab: instance.common.adminTab\n                    }))\n                    .sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0));\n\n                this.setState({instances});\n            });\n    }\n\n    renderItem(error, disabled, defaultValue) {\n        if (!this.state.instances) {\n            return null;\n        } else {\n            const accessAllowedConfigs = ConfigGeneric.getValue(this.props.data, 'accessAllowedConfigs') || [];\n            const accessAllowedTabs    = ConfigGeneric.getValue(this.props.data, 'accessAllowedTabs')    || [];\n\n            return <TableContainer>\n                <Table className={this.props.classes.table} size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={this.props.classes.header}>{i18n.t('custom_easy_Instance')}</TableCell>\n                            <TableCell className={this.props.classes.header}>{i18n.t('custom_easy_Config')}</TableCell>\n                            <TableCell className={this.props.classes.header}>{i18n.t('custom_easy_Tab')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.state.instances.map((row) => (\n                            <TableRow key={row.id}>\n                                <TableCell component=\"th\" scope=\"row\">{row.id}</TableCell>\n                                <TableCell>\n                                    {row.config ?\n                                        <Checkbox checked={accessAllowedConfigs.includes(row.id)}\n                                            onClick={() => {\n                                                const _accessAllowedConfigs = [...accessAllowedConfigs];\n                                                const pos = _accessAllowedConfigs.indexOf(row.id);\n                                                if (pos !== -1) {\n                                                    _accessAllowedConfigs.splice(pos, 1);\n                                                } else {\n                                                    _accessAllowedConfigs.push(row.id);\n                                                    _accessAllowedConfigs.sort();\n                                                }\n                                                this.onChange('accessAllowedConfigs', _accessAllowedConfigs);\n                                            }}\n                                        />\n                                    : null}</TableCell>\n                                <TableCell>\n                                    {row.adminTab ?\n                                        <Checkbox\n                                            checked={accessAllowedTabs.includes(row.id)}\n                                             onClick={() => {\n                                                 const _accessAllowedTabs = [...accessAllowedTabs];\n                                                 const pos = _accessAllowedTabs.indexOf(row.id);\n                                                 if (pos !== -1) {\n                                                     _accessAllowedTabs.splice(pos, 1);\n                                                 } else {\n                                                     _accessAllowedTabs.push(row.id);\n                                                     _accessAllowedTabs.sort();\n                                                 }\n                                                 this.onChange('accessAllowedTabs', _accessAllowedTabs);\n                                             }}\n                                        /> : null}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>;\n        }\n    }\n}\n\nConfigCustomEasyAccess.propTypes = {\n    socket: PropTypes.object.isRequired,\n    themeType: PropTypes.string,\n    themeName: PropTypes.string,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    data: PropTypes.object.isRequired,\n    schema: PropTypes.object,\n    onError: PropTypes.func,\n    onChange: PropTypes.func,\n};\n\nexport default withStyles(styles)(ConfigCustomEasyAccess);","import ConfigCustomEasyAccess from './ConfigCustomEasyAccess';\n\nexport default { ConfigCustomEasyAccess };"],"sourceRoot":""}